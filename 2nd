#include <stdio.h>
#include <stdlib.h>

// Linked List Implementation
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Insert at the end
void insert(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Delete a node
void deleteNode(Node** head, int key) {
    Node* temp = *head, *prev = NULL;
    if (temp != NULL && temp->data == key) {
        *head = temp->next;
        free(temp);
        return;
    }
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) return;
    prev->next = temp->next;
    free(temp);
}

// Print the linked list
void traverse(Node* head) {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

// Search for a value
int search(Node* head, int key) {
    while (head != NULL) {
        if (head->data == key) return 1;
        head = head->next;
    }
    return 0;
}

// Binary Tree Implementation
typedef struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

// Function to create a new tree node
TreeNode* createTreeNode(int data) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Insert in the binary tree
TreeNode* insertTree(TreeNode* node, int data) {
    if (node == NULL) return createTreeNode(data);
    if (data < node->data)
        node->left = insertTree(node->left, data);
    else
        node->right = insertTree(node->right, data);
    return node;
}

// In-order traversal
void inorderTraversal(TreeNode* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// Delete a node in the binary tree
TreeNode* deleteTreeNode(TreeNode* root, int key) {
    if (root == NULL) return root;
    if (key < root->data)
        root->left = deleteTreeNode(root->left, key);
    else if (key > root->data)
        root->right = deleteTreeNode(root->right, key);
    else {
        if (root->left == NULL) {
            TreeNode* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            TreeNode* temp = root->left;
            free(root);
            return temp;
        }
        TreeNode* temp = root->right;
        while (temp && temp->left != NULL) temp = temp->left;
        root->data = temp->data;
        root->right = deleteTreeNode(root->right, temp->data);
    }
    return root;
}

// Graph Implementation
#define MAX 100

typedef struct GraphNode {
    int vertex;
    struct GraphNode* next;
} GraphNode;

typedef struct Graph {
    int numVertices;
    GraphNode** adjLists;
} Graph;

// Function to create a graph
Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = vertices;
    graph->adjLists = (GraphNode**)malloc(vertices * sizeof(GraphNode*));
    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }
    return graph;
}

// Add edge to the graph
void addEdge(Graph* graph, int src, int dest) {
    GraphNode* newNode = (GraphNode*)malloc(sizeof(GraphNode));
    newNode->vertex = dest;
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    newNode = (GraphNode*)malloc(sizeof(GraphNode));
    newNode->vertex = src;
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

// Print the graph
void printGraph(Graph* graph) {
    for (int v = 0; v < graph->numVertices; v++) {
        GraphNode* temp = graph->adjLists[v];
        printf("\nVertex %d: ", v);
        while (temp) {
            printf("%d -> ", temp->vertex);
            temp = temp->next;
        }
        printf("NULL");
    }
}

// Free memory for the graph
void freeGraph(Graph* graph) {
    for (int i = 0; i < graph->numVertices; i++) {
        GraphNode* temp = graph->adjLists[i];
        while (temp) {
            GraphNode* toFree = temp;
            temp = temp->next;
            free(toFree);
        }
    }
    free(graph->adjLists);
    free(graph);
}

// Main function to demonstrate data structures
int main() {
    // Linked List Example
    Node* head = NULL;
    insert(&head, 10);
    insert(&head, 20);
    insert(&head, 30);
    printf("Linked List: ");
    traverse(head);
    deleteNode(&head, 20);
    printf("After deletion: ");
    traverse(head);
    printf("Search for 10: %s\n", search(head, 10) ? "Found" : "Not found");

    // Binary Tree Example
    TreeNode* root = NULL;
    root = insertTree(root, 50);
    insertTree(root, 30);
    insertTree(root, 70);
    insertTree(root, 20);
    insertTree(root, 40);
    insertTree(root, 60);
    insertTree(root, 80);
    printf("In-order traversal of Binary Tree: ");
    inorderTraversal(root);
    printf("\n");
    root = deleteTreeNode(root, 30);
    printf("In-order after deletion: ");
    inorderTraversal(root);
    printf("\n");

    // Graph Example
    Graph* graph = createGraph(5);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);
    printf("Graph adjacency list:");
    printGraph(graph);

    // Free allocated memory
    freeGraph(graph);

    return 0;
}
